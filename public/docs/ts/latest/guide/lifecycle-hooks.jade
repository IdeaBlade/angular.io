include ../../../../_includes/_util-fns

:marked
  # Component Lifecycle
  A Component has a lifecycle managed by Angular itself. Angular creates it, renders it, creates and renders its children,
  checks it when its data-bound properties change, and destroys it before removing it from the DOM.

  Angular offers **Lifecycle hooks**
  that give us visibility into these key moments and the ability to act when they occur.

  We cover these hooks in this chapter and demonstrate how they work in code.

  [Live Example](/resources/live-examples/lifecycle-hooks/ts/plnkr.html)

  <!--
    https://github.com/angular/angular/blob/master/modules/angular2/src/core/linker/interfaces.ts
  -->

.l-main-section
:marked
  ## The Lifecycle Hooks
  Directive and component instances have a lifecycle
  as Angular creates, updates, and destroys them.

  Developers can tap into key moments in that lifecycle by implementing
  one or more of the "Lifecycle Hook" interfaces, all of them available
  in the `angular2/core` library.

  Here is the complete lifecycle hook interface inventory:

   * `OnInit`
   * `OnDestroy`
   * `DoCheck`
   * `OnChanges`
   * `AfterContentInit`
   * `AfterContentChecked`
   * `AfterViewInit`
   * `AfterViewChecked`

  No directive or component will implement all of them and some of them only make
  sense for components.

  Each interface has a single hook method whose name is the interface name prefixed with `ng`.
  For example, the `OnInit` interface has a hook method named `ngOnInit`.

  Angular calls these hook methods in the following order:
  * `ngOnChanges` - called when an input or output binding value changes
  * `ngOnInit` - after the first `ngOnChanges`
  * `ngDoCheck` - developer's custom change detection
  * `ngAfterContentInit` - after component content initialized
  * `ngAfterContentChecked` - after every check of component content
  * `ngAfterViewInit` - after component's view(s) are initialized
  * `ngAfterViewChecked` - after every check of a component's view(s)
  * `ngOnDestroy` - just before the directive is destroyed.

  The [live example](/resources/live-examples/lifecycle-hooks/ts/plnkr.html) demonstrates
  these hooks.
  
.l-main-section
:marked
  ## Other lifecycles
  
  The hooks we've listed are not the end-all and be-all of hooks. 
  The router, for instance, also has it's own [router lifecycle hooks](router.html#router-lifecycle-hooks)
  that allow us to tap into specific moments in route navigation.
  
  A parallel can be drawn between `ngOnInit` and `routerOnActivate`. 
  Both are prefixed so as to avoid collision, and both run right when a component is 'booting' up.
  
  3rd party libraries might implement their hooks as well in order to give us, the developers, more
  control over how these libraries are used.

.l-main-section
:marked
  ## Navigating the live example
  
  The live example is fairly complex collection of components spread across 
  several files, but we need not be daunted by it.
  
  Like any other Angular 2 application, we can follow the code to get started.
  `index.html` tells us that we begin by loading `app/app.boot`. 
  Opening `app/app.boot.ts` shows the the application is being bootstrapped with
  `AppComponent`, like most of our other Angular 2 apps.
  
  Inside `app.component.ts` we see a few directives in its template together
  with the directive imports at the top.
  
+makeExample('lifecycle-hooks/ts/app/app.component.ts')
    
:marked
  We'll explore each of these directives in further detail over this chapter.
  Each directive has a parent component that controls an inner component
  that implements lifecycle hooks. 
  The parent component also has a log, that the inner component uses to log
  messages from its hooks.

.l-main-section
:marked
  ## Peek-a-boo
  The `PeekABooComponent` demonstrates all of the hooks in the same component.
  
figure.image-display
  img(src='/resources/images/devguide/lifecycle-hooks/peek-a-boo.gif' alt="Peek-a-boo")  
.l-sub-section
  :marked
    Except for `DoCheck`. If our component superseded regular Angular change detection
    with its own change detection processing
    we would also add a `ngDoCheck` method. We would **not** implement `ngOnChanges`.
    We write either `ngOnChanges` or `ngDoCheck`, not both.

    Custom change detection and `ngDoCheck` are on our documentation backlog.
:marked
  Peek-a-boo is a demo. We'd rarely if ever implement all interfaces like this in real life.

  We can see most hooks being fired when we initially create the component,
  followed by content and view checks surrounding `onChanges`, and finally 
  another set of content and view checks right before `onDestroy`.
  
  We now know - because we tested - that these hooks fire in the order they should.
  We now also know that `afterContentChecked` and `afterViewChecked` fire a *lot* of times.
  This means that we should keep whatever logic we put on these hooks as lean
  as possible, since they might be called several times per second!

  Our next examples will focus on each of these hooks.

.l-sub-section
  :marked
    ## Interface optional?
    Our `PeekABooComponent` implements a long list of lifecycle interfaces, but these are actually optional.
    We recommend adding them to benefit from TypeScript's strong typing and editor tooling.

    But they disappear from the transpiled JavaScript.
    Angular can't see them at runtime.  And they are useless to someone developing in
    a language without interfaces (such as pure JavaScript).

    Fortunately, they aren't necessary.
    We don't have to add the lifecycle hook interfaces to our directives and components to benefit from the hooks themselves.

    Angular instead inspects our directive and component classes
    and calls the hook methods *if they are defined*.
    Angular will find and call methods like `ngOnInit()`, with or without the interfaces.

.l-main-section
:marked
  ## OnChanges

.l-main-section  
:marked
  ## AfterView

.l-main-section
:marked
  ## AfterContent

.l-main-section
:marked
  ## Spy directives

.l-main-section
:marked
  ## DoCheck
  
  update image on 'navigating the live example after adding this'
  
